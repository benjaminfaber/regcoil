#!/usr/bin/env python

# These tests are mostly copied from the example regcoilPaper_figure10d_originalAngle_loRes.

# This python script checks the output file for an example to 
# see if the results are close to expected values.  This script may be
# run directly, and it is also called when "make test" is run from the
# main REGCOIL directory.

execfile('../testsCommon.py')
absoluteTolerance = 1e-100

numFailures = 0

f = readOutputFile()

variableName = 'lambda'
data = f.variables[variableName][()]
relativeTolerance = 1e-12
numFailures += arrayShouldBe(data, [0, 1e-15, 1.33352143216332e-15, 1.77827941003892e-15,\
                                    2.37137370566166e-15, 3.16227766016838e-15, 4.21696503428582e-15,\
                                    5.62341325190349e-15, 7.49894209332456e-15, 1e-14],relativeTolerance,absoluteTolerance)


variableName = 'chi2_B'
data = f.variables[variableName][()]
relativeTolerance = 0.03
# Skip the lambda=0 case, which is pathological, and make sure the other ones are within a few % of the high-res results:
numFailures += arrayShouldBe(data[1:], [0.174519878306313, 0.233148551834137, \
    0.310446213587783, 0.411565852326815, 0.542616084841207, \
    0.710568315783369, 0.922890554110523, 1.18673864681126, 1.50770781013225],relativeTolerance,absoluteTolerance)

variableName = 'chi2_K'
data = f.variables[variableName][()]
relativeTolerance = 0.01
numFailures += arrayShouldBe(data[1:], [1.74957088182873e+15, 1.6989658516062e+15,\
    1.64892520707378e+15, 1.59982527129183e+15, 1.55209554042516e+15,\
    1.50621123410416e+15, 1.46269693947801e+15, 1.42212837760326e+15,\
    1.38509938973785e+15], relativeTolerance,absoluteTolerance)

variableName = 'max_Bnormal'
data = f.variables[variableName][()]
relativeTolerance = 0.03
numFailures += arrayShouldBe(data[1:], [0.117555544291034, 0.134561224876993,\
    0.153923792979921, 0.176347144447289, 0.201603899107085,\
    0.229977435728317, 0.261839981656698, 0.296625161466877, 0.333988791941713], relativeTolerance,absoluteTolerance)

variableName = 'max_K'
data = f.variables[variableName][()]
relativeTolerance = 0.06
numFailures += arrayShouldBe(data[1:], [ 8824481.60102707, 8355450.23653953,\
    7884212.39105115, 7412969.17310808, 6945281.57578389, 6485916.75531679,\
    6040435.92861007, 5614638.75966927, 5214018.48872153], relativeTolerance,absoluteTolerance)

variableName = 'single_valued_current_potential_mn'
data = f.variables[variableName][()]
relativeTolerance = 1.0e-4
absoluteTolerance = 1.0e4
numFailures += arrayShouldBe(data[0,:], [1731005604.37708, -444331666.063525, -1472899284.43885, 980635716.798286, \
    815691232.944309, -1104930341.54598, -58644057.1859465, 639260356.825692, \
    -279545673.816457, -135825846.727631, 180469063.829492, \
    -22024206.7289197, -24406912.6613725, -16234787.020576, \
    -4685406.74137503, 37251686.1535765, -12725402.049256, -15979875.2901133, \
    14462540.5208822, -165882.748517378, -6483912.61692183, 1657651.13515783, \
    485862.062508222, -1063828.08158305, 472221.697888862, 801627.062033693, \
    217218.605240715, -150222.654217215, -159781.714043105, 708.225428690435, \
    49941.7871923514, 31734.070474727, 19720.8290883602, 44150.3288826565, \
    98358.3550515968, -39847.2297642602, -185199.287970016, \
    -84955.4318756758, 246459.691863851, 858658.401684389, 251211.455724461, \
    -1676614.78341547, 1438572.3937332, 2529328.98798428, -9632645.46917101, \
    1700210.58053288, 19883358.0468277, -22904106.5031413, -12645581.3301806, \
    43615741.4375774, -10190567.2973736, -11542720.573846, -42961102.0670418, \
    -9474465.11556876, 235353472.795885, -236942239.680223, \
    -277986499.553027, 809547581.258914, -263574146.564112, \
    -1167866767.85885, 1222529946.58582, 752120475.271827, -1818945628.114, \
    125830081.236413, 1699653280.29533, -598828927.476009, -1367588785.24392, \
    737377790.898709, 1033962379.58096, -998755899.367221, -462135937.540694, \
    967257358.599086, -87939821.2626274, -484824775.037922, 261724829.675858, \
    64989390.8847116, -133314096.068479, 25602615.559657, 13667744.7971454, \
    17792276.7936737, -1196781.5148391, -30070455.6839503, 12261408.1125697, \
    10902763.9005502, -10027733.6782629, 992510.077984215, 4279634.23924672, \
    -882827.323225474, -9077.54022405052, 506548.786777115, \
    -642941.690705537, -700601.895618024, -120452.426992106, \
    159326.180905968, 115939.289935293, -12572.9296368703, -42250.9941259284, \
    -21019.6968931688, -27407.3940916736, -105482.516874957, \
    -100675.02389058, 77123.3624971584, 130240.408470722, 26563.1382585466, \
    -189319.320442231, -974479.756728692, -58678.613326091, 2333000.10713489, \
    -2937252.64606547, -3374901.11132619, 13630207.8279794, \
    -4892842.50188862, -25527794.3198716, 31652131.6130665, 11528167.9371345, \
    -48518234.1596728, 13400402.4802168, 5473532.23223127, 70412586.8874164, \
    -20054285.4009072, -286855989.243685, 371489643.455107, 231393651.14511, \
    -972025866.861937, 521728333.654819, 1109389701.88028, -1571201178.70396, \
    -340251060.669758, 1866541695.265, -629021193.951483, -1310702641.57257, \
    806606378.83005, 931347046.553497, -756862639.5658, -678183009.560267, \
    888661336.370311, 211913962.322877, -804467498.15057, 186564730.401877, \
    350975794.406715, -240180629.006594, -13561854.7038093, 96361646.9774121, \
    -26940819.8378222, -7193229.19520417, -16313272.2739765, \
    5789042.07860519, 23026533.6139585, -11859960.927914, -7240257.3616156, \
    7070177.99157095, -1345841.93765552, -2938117.47753011, 369524.120698118, \
    -113863.215799705, -54714.0332335183, 708425.282346444, 531779.762515208, \
    28765.7816099222, -155527.988220082, -43240.8457659932, 26548.2695587366, \
    20946.1244417707, 34461.3328533798, 66596.4707710449, 133790.766833099, \
    105112.691334617, -79037.4046029939, -9856.38865744779, \
    -10407.7678068391, 104289.095098516, 1318457.80005645, -58954.6470264926,\
    -3053231.58219702, 5023569.09063874, 4116489.12676709, -18268027.571918,\
    9423430.10909431, 30476432.0012026, -41849193.939957, -8855893.95783427],relativeTolerance,absoluteTolerance,requireSameLength=False)


del data
f.close()
print "numFailures:",numFailures
exit(numFailures > 0)
