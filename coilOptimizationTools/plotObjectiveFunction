#!/usr/bin/env python
print "usage: plotObjectiveFunction regcoil_in.XXX"

import sys
from regcoilScan import readVariable
import os
from scipy.io import netcdf
import math
import numpy as np
import matplotlib.pyplot as plt

def plotObjectiveFunction(inputFilename):

  outputFilename = "regcoil_out" + inputFilename[10::] + ".nc"
  
  alpha = readVariable("alpha","float",inputFilename,required=True)
  objective_function_option = readVariable("objective_function_option","int",inputFilename,required=True)

  directories = filter(os.path.isdir, os.listdir("."))

  chi2_Bs = []
  coil_volumes = []
  coil_plasma_dists = []
  evals = []

  for directory in directories:
    
      filename = directory+"/"+outputFilename
      currFileName = directory+"/"+inputFilename
      if not os.path.isfile(filename):
          print "Directory "+directory+" does not have a "+outputFilename+" file (yet)."
          continue
      try:
          f = netcdf.netcdf_file(filename,'r',mmap=False)
      except:
          print "Unable to open "+filename+" even though this file exists."
          continue
      try:
          dummy = f.variables["K2"][()]
      except:
          print "Unable to read "+filename+" even though this file exists."
          continue
      if math.isnan(dummy[0,0,0]):
              print "Run in directory "+directory+" has NaNs, so skipping it."
              continue
      print "Processing directory "+directory
      evals.append(directory[5::])
      chi2_Bs.append(f.variables["chi2_B"][()][-1])
      coil_volumes.append(f.variables["volume_coil"][()])
      coil_plasma_dists.append(f.variables["coil_plasma_dist"][()])

  chi2_Bs = np.array(chi2_Bs)
  coil_volumes = np.array(coil_volumes)
  coil_plasma_dists = np.array(coil_plasma_dists)

  if (objective_function_option == 0):
      objective_functions = chi2_Bs - alpha*coil_volumes
  if (objective_function_option == 1):
      objective_funcitons = chi2_Bs - alpha*coil_volumes**(1.0/3.0)
  if (objective_function_option == 2):
      objective_functions = chi2_Bs - alpha*coil_plasma_dists

  plt.figure(facecolor='white')
  plt.semilogy(evals, chi2_Bs,'b.',label='chi2_B')
  plt.semilogy(evals, coil_volumes,'g.',label='coil_volume')
  plt.semilogy(evals, coil_plasma_dists,'r.',label='coil_plasma_dists')
  plt.legend()
  plt.xlabel('Function Evaluations')
  plt.legend()

  plt.figure(facecolor='white')
  plt.semilogy(evals, objective_functions,'r.',label='objective_function')
  plt.legend()
  plt.xlabel('Function Evaluations')
  plt.legend()

  plt.show()

if __name__ == "__main__":
  if len(sys.argv) != 2:
    print "Error! You must specify 1 arguments: regcoil_in.XXX."
    exit(1)
  plotObjectiveFunction(sys.argv[1])
