#!/usr/bin/env python
from evaluateRegcoil import coilFourier, evaluateFunctionRegcoil, evaluateGradientRegcoil
import numpy as np
import sys
from regcoilScan import readVariable, namelistLineContains
import os
from scipy import optimize
import scipy

# nmax and mmax are maximum Fourier modes to read from nescin file
def cg_scipy(regcoil_input_file):

  # Create coilFourier object
  nmax_sensitivity = readVariable("nmax_sensitivity","int",regcoil_input_file,required=True)
  mmax_sensitivity = readVariable("mmax_sensitivity","int",regcoil_input_file,required=True)
  nescin_filename = readVariable("nescin_filename","string",regcoil_input_file,required=True)

  # scipy.optimize method
  # The following methods use gradient information: CG, BFGS, Newton-CG, L-BFGS-B, TNC
  # SLSQP, dogleg, trust-ncg
  method = readVariable("scipy_optimize_method","string",regcoil_input_file,required=True)
  if (method is None):
    method = 'CG'
  # Order to use for norm of the gradient
  norm = readVariable("norm","int",regcoil_input_file,required=True)
  if (norm is None):
    norm = 2
  # Tolerance for norm of the gradient
  gtol = readVariable("gtol","float",regcoil_input_file,required=True)
  if (gtol is None):
    gtol = 1e-5
  # Number of iterations
  maxiter = readVariable("maxiter","int",regcoil_input_file,required=True)
  if (maxiter is None):
    maxiter = 1000
  # 0 = don't use gradient function (finite diff), 1 = use gradient
  grad_option = readVariable("grad_option","int",regcoil_input_file,required=False)
  if (grad_option is None):
    grad_option = 1

  # nmax and mmax are required!
  # Max n in nescin file
  nmax = readVariable("nmax","int",regcoil_input_file,required=True)
  # max m in nescin file
  mmax = readVariable("mmax","int",regcoil_input_file,required=True)
  
  nescinObject = coilFourier(nmax,mmax,regcoil_input_file)
  nescinObject.set_Fourier_from_nescin(nescin_filename)

  x0 = nescinObject.omegas_sensitivity

  f = evaluateFunctionRegcoil
  if (grad_option == 1):
    fprime = evaluateGradientRegcoil
  else:
    fprime = None
  args = (nescinObject,)
  if (method=="CG" or method=="BFGS"):
    options={'gtol':gtol,'disp':True}
  else:
    options={'disp':True}
  full_output = True
  disp = True
  retall = True

  OptimizeResult = scipy.optimize.minimize(fun=f,x0=x0,args=args,method=method,jac=fprime,hess=None,hessp=None,bounds=None,options=options)
  sol = OptimizeResult.x
  func = evaluateFunctionRegcoil(sol,nescinObject)
  grad = evaluateGradientRegcoil(sol,nescinObject)
  print "function value: " + str(func)
  print "norm of grad: " + np.linalg.norm(grad,2)
  print OptimizeResult.message

if __name__ == "__main__":
  cg_scipy(sys.argv[1])

